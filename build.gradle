buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:3.3.4"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'com.avast.gradle.docker-compose' version '0.9.4'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'

group = 'com.kubra.prepay'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://nexus.ifactornotifi.com/repository/public"
        credentials {
            username = "${nexusUsername}"
            password = "${nexusPassword}"
        }
    }
}

jar {
    archivesBaseName = "APP"
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    testCompile 'org.mockito:mockito-core:2.25.0'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.7' //Needed to do PATCH with rest template


    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok:1.18.6'

    implementation 'com.kubra:auth0-oidc-resource-server-spring-boot-starter:2.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.swagger:swagger-annotations:1.5.20'

    // database
    implementation 'org.flywaydb:flyway-core:5.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE'
    implementation 'com.zaxxer:HikariCP:3.3.1'

    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'javax.inject:javax.inject:1'

//    implementation 'org.hibernate:hibernate-core:5.4.2.FINAL'
//    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.2.Final'
//    implementation 'org.hibernate:hibernate-spatial'
//    implementation 'javax.xml.bind:jaxb-api:2.3.1'


    runtime 'mysql:mysql-connector-java'
}

// Configures the open-api-generator-gradle-plugin
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/openapi/openapi-spec.yml"
    outputDir = "$rootDir/openapi"
    apiPackage = "com.kubra.prepay.generated.api"
    modelPackage = "com.kubra.prepay.generated.model"
    invokerPackage = "com.kubra.prepay.generated.invoker"
    modelNameSuffix = "Resource"
}

//Clear out opeanapi generated code
task cleanOpenApi(type: Delete) {
    delete "$rootDir/openapi/src", "$rootDir/src/main/java/com/kubra/prepay/generated"
}

// Copies server stubs to src
task generateServerStubs(type: Copy, group: "Custom", description: "copies stuff") {
    from "$rootDir/openapi/src/main/java/com/kubra/prepay/generated"
    into "$rootDir/src/main/java/com/kubra/prepay/generated"

    includeEmptyDirs = false
}

// Causes openApiGenerate task to be called when invoking the generateServerStubs task
generateServerStubs.dependsOn("cleanOpenApi", "openApiGenerate")

// Configure the bootRun plugin
bootRun {
    // Allows debugging
    jvmArgs = [
            "-Dspring.output.ansi.enabled=ALWAYS",
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
    ]
}

// Configure dockerCompose plugin
dockerCompose {
    db {
        startedServices = ['db']
    }
    functional {
        startedServices = ['testdb', 'app']
    }
}


task runFunctionalTests {
    if (project.hasProperty("functionalTest")) {
        // Run the following tasks
        dependsOn 'assemble'
        dependsOn 'functionalComposeUp'
        dependsOn 'test'

        // Specify the order of tasks to run
        tasks.findByName('test').mustRunAfter 'functionalComposeUp'
        tasks.findByName('functionalComposeUp').mustRunAfter 'assemble'

        // Always remove testing containers as the last step, even if tests fail
        test.finalizedBy('functionalComposeDown')
    }
}

// Configure tests
test {
    if (project.hasProperty("functionalTest")) {
        println("Configuring functional tests")
        include 'com/kubra/prepay/functional/**'
    } else {
        print("Configuring unit tests")
        exclude 'com/kubra/prepay/functional/**'
    }
}

